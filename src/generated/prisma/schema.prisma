generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary key, generated IDs
  name        String
  slug        String   @unique(map: "product-slug-idx")
  category    String
  description String
  blurb       String?  @default("")
  images      String[] // Array of strings
  price       Decimal  @default(0) @db.Decimal(12, 2) // Left side 12 numerical places, 2 num places  
  brand       String
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  stock       Int
  numReviews  Int      @default(0)
  isFeatured  Boolean // @default(false)
  banner      String? // Optional
  createdAt   DateTime @default(now()) @db.Timestamp(6) // Milliseconds with 6 digits, for precision
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary key, generated IDs
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
}

model Account {
  userId            String  @db.Uuid // Foreign key that maps to User model/table
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Unique ID when combined (composite key)
}

model Session {
  sessionToken String   @id // Foreign key that maps to User model/table
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json // Empty array by default
  itemsPrice    Decimal  @db.Decimal(12, 2) // Up to 12 on left and 2 on right of decimal price
  totalPrice    Decimal  @db.Decimal(12, 2) // Up to 12 on left and 2 on right of decimal price
  shippingPrice Decimal  @db.Decimal(12, 2) // Up to 12 on left and 2 on right of decimal price
  taxPrice      Decimal  @db.Decimal(12, 2) // Up to 12 on left and 2 on right of decimal price
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
